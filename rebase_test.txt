initial
initial on dev
# I will create a new branch rebase_test from dev and commit some modifications(in this file) on local.
# After, I will create a new branch other from dev, push some modifications(in this file) and merge to dev.
# Now dev is ahead of rebase_test, I can test how to move commits on dev to rebase_test.

# This is others' modifications.

# Now other guy modify this file again.
This is rebase_test branch.


# You can use 'git rebase dev' on rebase_test branch to auto-merge and solve conflicts between others' and your's.
# Now normally, rebase_test modified by you is ahead of dev.

# There are more modifications commited by other developer, now you should rebase again.

# rebase will commit-wise compare your modifications and others', don't be afraid, you can re-add and re-commit each time when there have confilicts.

# conclusion
Process in rebase operation is that all unmerged commits of your local branch will be commit to dev branch, and 
maybe you should solve conflicts manually.
But all those operations is hapened in your local branch,which means there are no influences on dev branch.
Just like rebase the local branch to dev branch and commit all changes again.

If nothing else, you can use 'git rebase --abort' on your local branch, and the state of your local branch will be returned from rebasing to earlier.

# what else
If you have pushed to origin before rebase. When next time you push local branch, it will be required to solve conflicts manually 
which normally origin branch will be covered by local branch.